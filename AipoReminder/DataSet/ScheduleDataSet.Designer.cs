//------------------------------------------------------------------------------
// <auto-generated>
//     このコードはツールによって生成されました。
//     ランタイム バージョン:2.0.50727.4927
//
//     このファイルへの変更は、以下の状況下で不正な動作の原因になったり、
//     コードが再生成されるときに損失したりします。
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace AipoReminder.DataSet {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("ScheduleDataSet")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class ScheduleDataSet : global::System.Data.DataSet {
        
        private eip_t_scheduleDataTable tableeip_t_schedule;
        
        private search_eip_t_scheduleDataTable tablesearch_eip_t_schedule;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ScheduleDataSet() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected ScheduleDataSet(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["eip_t_schedule"] != null)) {
                    base.Tables.Add(new eip_t_scheduleDataTable(ds.Tables["eip_t_schedule"]));
                }
                if ((ds.Tables["search_eip_t_schedule"] != null)) {
                    base.Tables.Add(new search_eip_t_scheduleDataTable(ds.Tables["search_eip_t_schedule"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public eip_t_scheduleDataTable eip_t_schedule {
            get {
                return this.tableeip_t_schedule;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public search_eip_t_scheduleDataTable search_eip_t_schedule {
            get {
                return this.tablesearch_eip_t_schedule;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            ScheduleDataSet cln = ((ScheduleDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["eip_t_schedule"] != null)) {
                    base.Tables.Add(new eip_t_scheduleDataTable(ds.Tables["eip_t_schedule"]));
                }
                if ((ds.Tables["search_eip_t_schedule"] != null)) {
                    base.Tables.Add(new search_eip_t_scheduleDataTable(ds.Tables["search_eip_t_schedule"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableeip_t_schedule = ((eip_t_scheduleDataTable)(base.Tables["eip_t_schedule"]));
            if ((initTable == true)) {
                if ((this.tableeip_t_schedule != null)) {
                    this.tableeip_t_schedule.InitVars();
                }
            }
            this.tablesearch_eip_t_schedule = ((search_eip_t_scheduleDataTable)(base.Tables["search_eip_t_schedule"]));
            if ((initTable == true)) {
                if ((this.tablesearch_eip_t_schedule != null)) {
                    this.tablesearch_eip_t_schedule.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "ScheduleDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/ScheduleDataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableeip_t_schedule = new eip_t_scheduleDataTable();
            base.Tables.Add(this.tableeip_t_schedule);
            this.tablesearch_eip_t_schedule = new search_eip_t_scheduleDataTable();
            base.Tables.Add(this.tablesearch_eip_t_schedule);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeeip_t_schedule() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializesearch_eip_t_schedule() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            ScheduleDataSet ds = new ScheduleDataSet();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void eip_t_scheduleRowChangeEventHandler(object sender, eip_t_scheduleRowChangeEvent e);
        
        public delegate void search_eip_t_scheduleRowChangeEventHandler(object sender, search_eip_t_scheduleRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class eip_t_scheduleDataTable : global::System.Data.TypedTableBase<eip_t_scheduleRow> {
            
            private global::System.Data.DataColumn columnschedule_id;
            
            private global::System.Data.DataColumn columnuser_id;
            
            private global::System.Data.DataColumn columnlast_name;
            
            private global::System.Data.DataColumn columnfirst_name;
            
            private global::System.Data.DataColumn columnstart_date;
            
            private global::System.Data.DataColumn columnend_date;
            
            private global::System.Data.DataColumn columnname;
            
            private global::System.Data.DataColumn columnplace;
            
            private global::System.Data.DataColumn columnnote;
            
            private global::System.Data.DataColumn columnpublic_flag;
            
            private global::System.Data.DataColumn columnedit_flag;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public eip_t_scheduleDataTable() {
                this.TableName = "eip_t_schedule";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal eip_t_scheduleDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected eip_t_scheduleDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn schedule_idColumn {
                get {
                    return this.columnschedule_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn user_idColumn {
                get {
                    return this.columnuser_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn last_nameColumn {
                get {
                    return this.columnlast_name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn first_nameColumn {
                get {
                    return this.columnfirst_name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn start_dateColumn {
                get {
                    return this.columnstart_date;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn end_dateColumn {
                get {
                    return this.columnend_date;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn nameColumn {
                get {
                    return this.columnname;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn placeColumn {
                get {
                    return this.columnplace;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn noteColumn {
                get {
                    return this.columnnote;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn public_flagColumn {
                get {
                    return this.columnpublic_flag;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn edit_flagColumn {
                get {
                    return this.columnedit_flag;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public eip_t_scheduleRow this[int index] {
                get {
                    return ((eip_t_scheduleRow)(this.Rows[index]));
                }
            }
            
            public event eip_t_scheduleRowChangeEventHandler eip_t_scheduleRowChanging;
            
            public event eip_t_scheduleRowChangeEventHandler eip_t_scheduleRowChanged;
            
            public event eip_t_scheduleRowChangeEventHandler eip_t_scheduleRowDeleting;
            
            public event eip_t_scheduleRowChangeEventHandler eip_t_scheduleRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Addeip_t_scheduleRow(eip_t_scheduleRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public eip_t_scheduleRow Addeip_t_scheduleRow(string schedule_id, string user_id, string last_name, string first_name, System.DateTime start_date, System.DateTime end_date, string name, string place, string note, string public_flag, string edit_flag) {
                eip_t_scheduleRow roweip_t_scheduleRow = ((eip_t_scheduleRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        schedule_id,
                        user_id,
                        last_name,
                        first_name,
                        start_date,
                        end_date,
                        name,
                        place,
                        note,
                        public_flag,
                        edit_flag};
                roweip_t_scheduleRow.ItemArray = columnValuesArray;
                this.Rows.Add(roweip_t_scheduleRow);
                return roweip_t_scheduleRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                eip_t_scheduleDataTable cln = ((eip_t_scheduleDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new eip_t_scheduleDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnschedule_id = base.Columns["schedule_id"];
                this.columnuser_id = base.Columns["user_id"];
                this.columnlast_name = base.Columns["last_name"];
                this.columnfirst_name = base.Columns["first_name"];
                this.columnstart_date = base.Columns["start_date"];
                this.columnend_date = base.Columns["end_date"];
                this.columnname = base.Columns["name"];
                this.columnplace = base.Columns["place"];
                this.columnnote = base.Columns["note"];
                this.columnpublic_flag = base.Columns["public_flag"];
                this.columnedit_flag = base.Columns["edit_flag"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnschedule_id = new global::System.Data.DataColumn("schedule_id", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnschedule_id);
                this.columnuser_id = new global::System.Data.DataColumn("user_id", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnuser_id);
                this.columnlast_name = new global::System.Data.DataColumn("last_name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnlast_name);
                this.columnfirst_name = new global::System.Data.DataColumn("first_name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnfirst_name);
                this.columnstart_date = new global::System.Data.DataColumn("start_date", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnstart_date);
                this.columnend_date = new global::System.Data.DataColumn("end_date", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnend_date);
                this.columnname = new global::System.Data.DataColumn("name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnname);
                this.columnplace = new global::System.Data.DataColumn("place", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnplace);
                this.columnnote = new global::System.Data.DataColumn("note", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnnote);
                this.columnpublic_flag = new global::System.Data.DataColumn("public_flag", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpublic_flag);
                this.columnedit_flag = new global::System.Data.DataColumn("edit_flag", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnedit_flag);
                this.columnschedule_id.AutoIncrementSeed = -1;
                this.columnschedule_id.AutoIncrementStep = -1;
                this.columnschedule_id.AllowDBNull = false;
                this.columnschedule_id.DefaultValue = ((string)(""));
                this.columnuser_id.DefaultValue = ((string)(""));
                this.columnlast_name.DefaultValue = ((string)(""));
                this.columnfirst_name.DefaultValue = ((string)(""));
                this.columnstart_date.Caption = "start_date1";
                this.columnend_date.Caption = "end_date2";
                this.columnname.DefaultValue = ((string)(""));
                this.columnname.MaxLength = 99;
                this.columnplace.DefaultValue = ((string)(""));
                this.columnplace.MaxLength = 99;
                this.columnnote.DefaultValue = ((string)(""));
                this.columnnote.MaxLength = 255;
                this.columnpublic_flag.DefaultValue = ((string)(""));
                this.columnpublic_flag.MaxLength = 1;
                this.columnedit_flag.DefaultValue = ((string)(""));
                this.columnedit_flag.MaxLength = 1;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public eip_t_scheduleRow Neweip_t_scheduleRow() {
                return ((eip_t_scheduleRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new eip_t_scheduleRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(eip_t_scheduleRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.eip_t_scheduleRowChanged != null)) {
                    this.eip_t_scheduleRowChanged(this, new eip_t_scheduleRowChangeEvent(((eip_t_scheduleRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.eip_t_scheduleRowChanging != null)) {
                    this.eip_t_scheduleRowChanging(this, new eip_t_scheduleRowChangeEvent(((eip_t_scheduleRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.eip_t_scheduleRowDeleted != null)) {
                    this.eip_t_scheduleRowDeleted(this, new eip_t_scheduleRowChangeEvent(((eip_t_scheduleRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.eip_t_scheduleRowDeleting != null)) {
                    this.eip_t_scheduleRowDeleting(this, new eip_t_scheduleRowChangeEvent(((eip_t_scheduleRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removeeip_t_scheduleRow(eip_t_scheduleRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ScheduleDataSet ds = new ScheduleDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "eip_t_scheduleDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class search_eip_t_scheduleDataTable : global::System.Data.TypedTableBase<search_eip_t_scheduleRow> {
            
            private global::System.Data.DataColumn columnuser_id;
            
            private global::System.Data.DataColumn columnstart_date;
            
            private global::System.Data.DataColumn columnpublic_flag;
            
            private global::System.Data.DataColumn columnedit_flag;
            
            private global::System.Data.DataColumn columncheck_time;
            
            private global::System.Data.DataColumn columnother_user_id_list;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public search_eip_t_scheduleDataTable() {
                this.TableName = "search_eip_t_schedule";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal search_eip_t_scheduleDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected search_eip_t_scheduleDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn user_idColumn {
                get {
                    return this.columnuser_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn start_dateColumn {
                get {
                    return this.columnstart_date;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn public_flagColumn {
                get {
                    return this.columnpublic_flag;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn edit_flagColumn {
                get {
                    return this.columnedit_flag;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn check_timeColumn {
                get {
                    return this.columncheck_time;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn other_user_id_listColumn {
                get {
                    return this.columnother_user_id_list;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public search_eip_t_scheduleRow this[int index] {
                get {
                    return ((search_eip_t_scheduleRow)(this.Rows[index]));
                }
            }
            
            public event search_eip_t_scheduleRowChangeEventHandler search_eip_t_scheduleRowChanging;
            
            public event search_eip_t_scheduleRowChangeEventHandler search_eip_t_scheduleRowChanged;
            
            public event search_eip_t_scheduleRowChangeEventHandler search_eip_t_scheduleRowDeleting;
            
            public event search_eip_t_scheduleRowChangeEventHandler search_eip_t_scheduleRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Addsearch_eip_t_scheduleRow(search_eip_t_scheduleRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public search_eip_t_scheduleRow Addsearch_eip_t_scheduleRow(string user_id, string start_date, string public_flag, string edit_flag, string check_time, string other_user_id_list) {
                search_eip_t_scheduleRow rowsearch_eip_t_scheduleRow = ((search_eip_t_scheduleRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        user_id,
                        start_date,
                        public_flag,
                        edit_flag,
                        check_time,
                        other_user_id_list};
                rowsearch_eip_t_scheduleRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowsearch_eip_t_scheduleRow);
                return rowsearch_eip_t_scheduleRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                search_eip_t_scheduleDataTable cln = ((search_eip_t_scheduleDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new search_eip_t_scheduleDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnuser_id = base.Columns["user_id"];
                this.columnstart_date = base.Columns["start_date"];
                this.columnpublic_flag = base.Columns["public_flag"];
                this.columnedit_flag = base.Columns["edit_flag"];
                this.columncheck_time = base.Columns["check_time"];
                this.columnother_user_id_list = base.Columns["other_user_id_list"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnuser_id = new global::System.Data.DataColumn("user_id", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnuser_id);
                this.columnstart_date = new global::System.Data.DataColumn("start_date", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnstart_date);
                this.columnpublic_flag = new global::System.Data.DataColumn("public_flag", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpublic_flag);
                this.columnedit_flag = new global::System.Data.DataColumn("edit_flag", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnedit_flag);
                this.columncheck_time = new global::System.Data.DataColumn("check_time", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncheck_time);
                this.columnother_user_id_list = new global::System.Data.DataColumn("other_user_id_list", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnother_user_id_list);
                this.columnuser_id.DefaultValue = ((string)(""));
                this.columnstart_date.DefaultValue = ((string)(""));
                this.columnpublic_flag.DefaultValue = ((string)(""));
                this.columnedit_flag.DefaultValue = ((string)(""));
                this.columncheck_time.DefaultValue = ((string)(""));
                this.columnother_user_id_list.DefaultValue = ((string)(""));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public search_eip_t_scheduleRow Newsearch_eip_t_scheduleRow() {
                return ((search_eip_t_scheduleRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new search_eip_t_scheduleRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(search_eip_t_scheduleRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.search_eip_t_scheduleRowChanged != null)) {
                    this.search_eip_t_scheduleRowChanged(this, new search_eip_t_scheduleRowChangeEvent(((search_eip_t_scheduleRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.search_eip_t_scheduleRowChanging != null)) {
                    this.search_eip_t_scheduleRowChanging(this, new search_eip_t_scheduleRowChangeEvent(((search_eip_t_scheduleRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.search_eip_t_scheduleRowDeleted != null)) {
                    this.search_eip_t_scheduleRowDeleted(this, new search_eip_t_scheduleRowChangeEvent(((search_eip_t_scheduleRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.search_eip_t_scheduleRowDeleting != null)) {
                    this.search_eip_t_scheduleRowDeleting(this, new search_eip_t_scheduleRowChangeEvent(((search_eip_t_scheduleRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removesearch_eip_t_scheduleRow(search_eip_t_scheduleRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ScheduleDataSet ds = new ScheduleDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "search_eip_t_scheduleDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class eip_t_scheduleRow : global::System.Data.DataRow {
            
            private eip_t_scheduleDataTable tableeip_t_schedule;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal eip_t_scheduleRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableeip_t_schedule = ((eip_t_scheduleDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string schedule_id {
                get {
                    return ((string)(this[this.tableeip_t_schedule.schedule_idColumn]));
                }
                set {
                    this[this.tableeip_t_schedule.schedule_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string user_id {
                get {
                    if (this.Isuser_idNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableeip_t_schedule.user_idColumn]));
                    }
                }
                set {
                    this[this.tableeip_t_schedule.user_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string last_name {
                get {
                    if (this.Islast_nameNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableeip_t_schedule.last_nameColumn]));
                    }
                }
                set {
                    this[this.tableeip_t_schedule.last_nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string first_name {
                get {
                    if (this.Isfirst_nameNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableeip_t_schedule.first_nameColumn]));
                    }
                }
                set {
                    this[this.tableeip_t_schedule.first_nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime start_date {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableeip_t_schedule.start_dateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'eip_t_schedule\' にある列 \'start_date\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableeip_t_schedule.start_dateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime end_date {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableeip_t_schedule.end_dateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'eip_t_schedule\' にある列 \'end_date\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableeip_t_schedule.end_dateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string name {
                get {
                    if (this.IsnameNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableeip_t_schedule.nameColumn]));
                    }
                }
                set {
                    this[this.tableeip_t_schedule.nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string place {
                get {
                    if (this.IsplaceNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableeip_t_schedule.placeColumn]));
                    }
                }
                set {
                    this[this.tableeip_t_schedule.placeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string note {
                get {
                    if (this.IsnoteNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableeip_t_schedule.noteColumn]));
                    }
                }
                set {
                    this[this.tableeip_t_schedule.noteColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string public_flag {
                get {
                    if (this.Ispublic_flagNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableeip_t_schedule.public_flagColumn]));
                    }
                }
                set {
                    this[this.tableeip_t_schedule.public_flagColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string edit_flag {
                get {
                    if (this.Isedit_flagNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableeip_t_schedule.edit_flagColumn]));
                    }
                }
                set {
                    this[this.tableeip_t_schedule.edit_flagColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isuser_idNull() {
                return this.IsNull(this.tableeip_t_schedule.user_idColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setuser_idNull() {
                this[this.tableeip_t_schedule.user_idColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Islast_nameNull() {
                return this.IsNull(this.tableeip_t_schedule.last_nameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setlast_nameNull() {
                this[this.tableeip_t_schedule.last_nameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isfirst_nameNull() {
                return this.IsNull(this.tableeip_t_schedule.first_nameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setfirst_nameNull() {
                this[this.tableeip_t_schedule.first_nameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isstart_dateNull() {
                return this.IsNull(this.tableeip_t_schedule.start_dateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setstart_dateNull() {
                this[this.tableeip_t_schedule.start_dateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isend_dateNull() {
                return this.IsNull(this.tableeip_t_schedule.end_dateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setend_dateNull() {
                this[this.tableeip_t_schedule.end_dateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnameNull() {
                return this.IsNull(this.tableeip_t_schedule.nameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnameNull() {
                this[this.tableeip_t_schedule.nameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsplaceNull() {
                return this.IsNull(this.tableeip_t_schedule.placeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetplaceNull() {
                this[this.tableeip_t_schedule.placeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnoteNull() {
                return this.IsNull(this.tableeip_t_schedule.noteColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnoteNull() {
                this[this.tableeip_t_schedule.noteColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Ispublic_flagNull() {
                return this.IsNull(this.tableeip_t_schedule.public_flagColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setpublic_flagNull() {
                this[this.tableeip_t_schedule.public_flagColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isedit_flagNull() {
                return this.IsNull(this.tableeip_t_schedule.edit_flagColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setedit_flagNull() {
                this[this.tableeip_t_schedule.edit_flagColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class search_eip_t_scheduleRow : global::System.Data.DataRow {
            
            private search_eip_t_scheduleDataTable tablesearch_eip_t_schedule;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal search_eip_t_scheduleRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablesearch_eip_t_schedule = ((search_eip_t_scheduleDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string user_id {
                get {
                    if (this.Isuser_idNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tablesearch_eip_t_schedule.user_idColumn]));
                    }
                }
                set {
                    this[this.tablesearch_eip_t_schedule.user_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string start_date {
                get {
                    if (this.Isstart_dateNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tablesearch_eip_t_schedule.start_dateColumn]));
                    }
                }
                set {
                    this[this.tablesearch_eip_t_schedule.start_dateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string public_flag {
                get {
                    if (this.Ispublic_flagNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tablesearch_eip_t_schedule.public_flagColumn]));
                    }
                }
                set {
                    this[this.tablesearch_eip_t_schedule.public_flagColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string edit_flag {
                get {
                    if (this.Isedit_flagNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tablesearch_eip_t_schedule.edit_flagColumn]));
                    }
                }
                set {
                    this[this.tablesearch_eip_t_schedule.edit_flagColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string check_time {
                get {
                    if (this.Ischeck_timeNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tablesearch_eip_t_schedule.check_timeColumn]));
                    }
                }
                set {
                    this[this.tablesearch_eip_t_schedule.check_timeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string other_user_id_list {
                get {
                    if (this.Isother_user_id_listNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tablesearch_eip_t_schedule.other_user_id_listColumn]));
                    }
                }
                set {
                    this[this.tablesearch_eip_t_schedule.other_user_id_listColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isuser_idNull() {
                return this.IsNull(this.tablesearch_eip_t_schedule.user_idColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setuser_idNull() {
                this[this.tablesearch_eip_t_schedule.user_idColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isstart_dateNull() {
                return this.IsNull(this.tablesearch_eip_t_schedule.start_dateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setstart_dateNull() {
                this[this.tablesearch_eip_t_schedule.start_dateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Ispublic_flagNull() {
                return this.IsNull(this.tablesearch_eip_t_schedule.public_flagColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setpublic_flagNull() {
                this[this.tablesearch_eip_t_schedule.public_flagColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isedit_flagNull() {
                return this.IsNull(this.tablesearch_eip_t_schedule.edit_flagColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setedit_flagNull() {
                this[this.tablesearch_eip_t_schedule.edit_flagColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Ischeck_timeNull() {
                return this.IsNull(this.tablesearch_eip_t_schedule.check_timeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setcheck_timeNull() {
                this[this.tablesearch_eip_t_schedule.check_timeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isother_user_id_listNull() {
                return this.IsNull(this.tablesearch_eip_t_schedule.other_user_id_listColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setother_user_id_listNull() {
                this[this.tablesearch_eip_t_schedule.other_user_id_listColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class eip_t_scheduleRowChangeEvent : global::System.EventArgs {
            
            private eip_t_scheduleRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public eip_t_scheduleRowChangeEvent(eip_t_scheduleRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public eip_t_scheduleRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class search_eip_t_scheduleRowChangeEvent : global::System.EventArgs {
            
            private search_eip_t_scheduleRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public search_eip_t_scheduleRowChangeEvent(search_eip_t_scheduleRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public search_eip_t_scheduleRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591